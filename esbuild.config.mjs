import fs from "node:fs";
import esbuild from "esbuild";
import { sassPlugin } from "esbuild-sass-plugin";
import process from "process";
import builtins from "builtin-modules";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

// Quick'n'Dirty Rename Plugin

function renamePlugin(src, dest) {
	return {
		name: "esbuild-rename-plugin",
		setup(build) {
			build.onEnd(() => {
				if (!fs.existsSync(src)) return;

				if (fs.lstatSync(src).isDirectory()) {
					fs.cpSync(src, dest, {
						errorOnExist: false,
						force: true,
						preserveTimestamps: false,
						recursive: true,
						verbatimSymlinks: true,
					});

					fs.rmSync(src, {
						force: true,
						recursive: true,
					});
				} else {
					fs.renameSync(src, dest);
				}
			});
		},
	};
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["./src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: [
		sassPlugin({
			filter: /\.scss$/,
		}),
		renamePlugin("./main.css", "./styles.css"),
	],
});

if (prod) {
	await context.rebuild({});
	process.exit(0);
} else {
	await context.watch({});
}
